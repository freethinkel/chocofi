/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define L_DEFAULT 0
#define L_CODE 1
#define L_FUNC 2
#define L_SYSTEM 3

&lt {
    tapping-term-ms = <160>;
    flavor = "tap-preferred";
};

/ {
        behaviors {
              cm: controls_mods {
                compatible = "zmk,behavior-hold-tap";
                label = "CUSTOM_HOLD";
                #binding-cells = <2>;
                tapping-term-ms = <160>;
                quick-tap-ms = <0>;
                flavor = "tap-preferred";
                bindings = <&kp>, <&kp>;
              };
              eq: esc_or_q {
                compatible = "zmk,behavior-tap-dance";
                label = "ESC_OR_Q";
                #binding-cells = <0>;
                tapping-term-ms = <180>;
                bindings = <&kp Q>, <&kp ESC>;
              };
        };
        macros {
            lock_mac: lock_mac {
                compatible = "zmk,behavior-macro";
                #binding-cells = <0>;
                bindings
                    = <&macro_press &kp LGUI>
                    , <&macro_press &kp LCTRL>
                    , <&macro_tap &kp Q>
                    , <&macro_release &kp LGUI>
                    , <&macro_release &kp LCTRL>
                    ;
            };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
   &none &eq          &kp W    &kp E     &kp R     &kp T                   &kp Y            &kp U      &kp I      &kp O      &kp P            &none
   &none &cm LCTRL A  &kp S    &kp D     &kp F     &kp G                   &kp H            &kp J      &kp K      &kp L      &kp SEMI         &none
   &none &cm LSHFT Z  &kp X    &kp C     &kp V     &kp B                   &kp N            &kp M      &kp COMMA  &kp DOT    &cm RSHIFT FSLH  &none
                               &kp LALT  &kp LGUI  &lt L_FUNC SPACE        &lt L_CODE ENTER &kp BSPC   &mo L_SYSTEM
                        >;
                };
                code_layer {
                        bindings = <
   &none    &kp TAB        &kp C_BRI_DN  &kp C_BRI_UP  &trans   &trans            &kp C_PREV   &kp C_PLAY_PAUSE  &kp C_NEXT  &kp C_VOL_DN  &kp C_VOL_UP  &none
   &none    &cm LCTRL N1   &kp N2        &kp N3        &kp N4   &kp N5            &kp LEFT     &kp DOWN          &kp UP      &kp RIGHT     &kp SQT       &none
   &none    &cm LSHIFT N6  &kp N7        &kp N8        &kp N9   &kp N0            &trans       &trans            &trans      &trans        &cm RSHIFT GRAVE     &none
                                         &trans        &trans   &trans            &trans       &kp RGUI          &trans
                        >;
                };

                func_layer {
                        bindings = <
   &none &lt TAB ESC    &trans  &trans   &trans  &trans       &kp LPAR    &kp RPAR      &trans     &trans      &kp BSPC  &none
   &none &kp LCTRL      &trans  &trans   &trans  &trans       &kp LBKT    &kp RBKT      &trans     &trans      &trans    &none
   &none &kp LSHFT      &trans  &trans   &trans  &trans       &kp MINUS   &kp EQUAL     &kp BSLH   &trans      &trans    &none
                                &trans   &trans  &trans       &trans      &trans        &trans
                        >;
                };

                system_layer {
                        bindings = <
   &none &lock_mac    &trans  &trans   &trans  &trans       &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &trans  &none
   &none &kp LCTRL      &trans  &trans   &trans  &trans       &kp LBKT    &kp RBKT      &kp LPAR      &kp RPAR        &trans  &none
   &none &kp LSHFT      &trans  &trans   &trans  &trans       &kp MINUS   &kp EQUAL     &kp BSLH      &trans        &trans  &none
                                &trans   &trans  &trans       &trans      &trans        &trans
                        >;
                };
        };
};
